import java.util.Vector;//import for vector stackimport java.util.*; /**  * A class of stacks whose entries are stored in a vector.  * @param <T> generic datatype */public final class PalindromeStack<T> implements PalindromeInterface<T> {    private Vector<T> stack;   // Last element is the top entry in stack    private boolean initialized = false; //for checking initialization    private static final int DEFAULT_CAPACITY = 50;//sets a default capacity    private static final int MAX_CAPACITY = 10000;//protects with a maximum  /**	*sets the DEFAULT_CAPACITY of the stack  	*/   public PalindromeStack()   {      this(DEFAULT_CAPACITY);   } // end default constructor   	/**	* The Palindrome stack method makes the vector stack, checks capacity and 	* also sets that the constructor has been initialized to true.	* @param initialCapacity is the starting compacity of the stack	*/    public PalindromeStack(int initialCapacity)    {      checkCapacity(initialCapacity);//checks for security      stack = new Vector<>(initialCapacity); // makes the Vectorstack      initialized = true;//sets initialization	      } // end constructor      /** 	*Adds a new entry to the top of this stack.    *@param newEntry  An object to be added to the stack. 	*/	public void push(T newEntry)	{	    	    checkInitialization();//checks initialization for security 	    stack.add(newEntry);//adds the newEntry to the stack			} // end push	   /**	*Retrieves this stack's top entry.    *@return  The object at the top of the stack.    *@throws  EmptyStackException if the stack is empty. 	*/	public T peek()	{	   checkInitialization();	   if (isEmpty())		  throw new EmptyStackException();	   else		  return stack.lastElement();	} // end peek		/** 	*Removes and returns this stack's top entry.	*@return  The object at the top of the stack. 	*@throws  EmptyStackException if the stack is empty before the operation. 	*/	public T pop()	{	   checkInitialization();	   if (isEmpty())		  throw new EmptyStackException();	   else		  return stack.remove(stack.size()-1);	} // end pop	/** 	*Detects whether this stack is empty.    *@return  True if the stack is empty. 	*/	public boolean isEmpty()	{		return stack.isEmpty();	}	/**     *Removes all entries from this stack.     */	public void clear()	{		stack.clear();	}	/**     *checkCapacity checks the capacity that is handed to the pag	*@throws and exception if the client requests a capacity that is too large.    */	public void checkCapacity(int capacity)	{			if (capacity > MAX_CAPACITY)			throw new IllegalStateException("Attempt to create a stack whose" +			"capacity exeeds allowed" +			"maximum of" + MAX_CAPACITY);			}	//================================    // Throws an exception if this object is not initialized.	//	private void checkInitialization()	{			if(!initialized)				throw new SecurityException("Palindrome is not ititialized" +										"properly");	}	//  . . .} // end VectorStack